<%= render "public/shared/card",
  title: @place.name,
  description: @place.description,
  image: @place.image,
  related_title: "関連イベント",
  related_items: @place.events,
  empty_message: "関連するイベントはありません。",
  related_content: -> (event) {
    concat(content_tag(:p, "イベント名: #{event.title}", class: "text-muted"))
    concat(content_tag(:p, "開始日時: #{event.start_date}"))
    concat(content_tag(:p, "終了時刻: #{event.end_date}"))
  },
  footer_links: (
    link_to("編集", edit_place_path(@place), class: "btn btn-outline-success btn-lg mb-6") +
    link_to("場所一覧", places_path, class: "btn btn-outline-secondary btn-lg mb-6") +
    link_to("新規イベント", new_event_path, class: "btn btn-outline-primary btn-lg mb-6")
  )
%>

<div class="container my-5">
<div class="card shadow-sm">
<div class="card-body">
 <h1 class="card-title text-center"><%= @place.name %>の地図</h1>
 <p class ="text-muted mt-2" id="zipcode"> 郵便番号: <%= @place.zipcode %></p>
 <p class ="text-muted mt-2"> 住所: <%= @place.full_address %></p>
 <div id="map" style="height: 400px; width: 100%;" data-lat="<%= @place.latitude %>" data-lng="<%= @place.longitude %>"></div>
</div>
</div>
</div>

<script>
function initMap() {
  const mapElement = document.getElementById("map");
  if (!mapElement) return;

  const lat = parseFloat(mapElement.dataset.lat);
  const lng = parseFloat(mapElement.dataset.lng);

  if (!isNaN(lat) && !isNaN(lng)) {
    const location = { lat: lat, lng: lng };
    const map = new google.maps.Map(mapElement, {
      center: location,
      zoom: 15,
    });
    new google.maps.Marker({
      map: map,
      position: location,
      title: "ここです！",
    });
  } else {
    // 緯度経度がなければ住所から取得
    const address = document.querySelector("#zipcode")?.nextElementSibling?.textContent?.replace("住所: ", "")?.trim();
    if (address) {
      const geocoder = new google.maps.Geocoder();
      geocoder.geocode({ address: address }, function(results, status) {
        if (status === "OK") {
          const location = results[0].geometry.location;
          const map = new google.maps.Map(mapElement, {
            center: location,
            zoom: 15,
          });
          new google.maps.Marker({
            map: map,
            position: location,
            title: "ここです！（住所から取得）",
          });
        } else {
          alert("地図の表示に失敗しました: " + status);
        }
      });
    } else {
      console.warn("住所情報も取得できませんでした");
    }
  }
}

  document.addEventListener("DOMContentLoaded", function () {
    const zipcodeInput = document.getElementById("zipcode");

    if (zipcodeInput) {
      zipcodeInput.addEventListener("blur", function () {
        const zipcode = zipcodeInput.value.replace(/[^0-9]/g, "");
        if (!zipcode) return;

        fetch('/search_address?postal_code=' + postalCode)
          .then(response => {
            if (!response.ok) throw new Error("住所が見つかりませんでした");
            return response.json();
          })
          .then(data => {
            document.getElementById("prefecture").value = data.prefecture || "";
            document.getElementById("city").value = data.city || "";
            document.getElementById("street").value = data.street || "";

            const address = `${data.prefecture}${data.city}${data.street}`;
            updateMapByAddress(address);
          })
          .catch(error => {
            alert(error.message);
          });
      });
    }

    window.updateMapByAddress = function(address) {
      const mapElement = document.getElementById("map");
      if (!mapElement) return;

      const geocoder = new google.maps.Geocoder();
      geocoder.geocode({ address: address }, function(results, status) {
        if (status === "OK") {
          const map = new google.maps.Map(mapElement, {
            center: results[0].geometry.location,
            zoom: 15,
          });

          new google.maps.Marker({
            map: map,
            position: results[0].geometry.location
          });
        } else {
          alert("地図の表示に失敗しました: " + status);
        }
      });
    };
  });

  window.initMap = initMap;
</script>

<script async
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['MAPS_API_KEY'] %>&callback=initMap&loading=async">
</script>